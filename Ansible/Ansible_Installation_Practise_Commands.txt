Ansible Installation & Configurations:

Launch 3 EC2 Instances... 1 for Ansible Controller & 2 as Nodes

SSH connections :::

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Login to Ansible Node1 & Node2. Perform below activities:

#Add User in Ansible Nodes : 

sudo -i

useradd -m -d /home/ansibleadmin ansibleadmin

#useradd ansibleadmin

passwd ansibleadmin

#Enter New Password:
#Confirm Password:

#Goto:

vi /etc/ssh/sshd_config

#Enable Password Authentication to Yes and save the file
#Execute Below command to update the changes.

service sshd reload
sed command:[root@ip-172-31-27-166 ~]# sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config

#As a root user edit below file:

$ visudo

#add the below mentioned line in the file and save it.
 
#ansibleadmin ALL=(ALL) NOPASSWD: ALL


devopsadmin ALL=(ALL) NOPASSWD: ALL


su - ansibleadmin

ls -a 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#Login to Ansible Controller:

sudo -i

#Install epel Package :
#Install Ansible 

amazon-linux-extras install epel -y
amazon-linux-extras install ansible2 -y

sudo apt install ansible2 -y

#go to /etc/ansible

#host - inventory file
#config
#roles 

#Add User in Ansible Controller : 


useradd -m -d /home/devopsadmin devopsadmin

#useradd devopsadmin


chown -R devopsadmin:devopsadmin /etc/ansible

su - devopsadmin	
ssh-keygen

ssh-copy-id ansibleadmin@172.31.9.163
ssh-copy-id ansibleadmin@172.31.2.217

ssh ansibleadmin@172.31.9.163
ssh ansibleadmin@172.31.2.217

###update vi etc/ansible/host

[testnodes]
samplenode1 ansible_ssh_host=172.31.9.163 ansible_ssh_user=ansibleadmin
samplenode2 ansible_ssh_host=172.31.2.217 ansible_ssh_user=ansibleadmin


[database_servergrp1]
samplenode1 ansible_ssh_host=172.31.9.163 ansible_ssh_user=ansibleadmin
samplenode2 ansible_ssh_host=172.31.2.217 ansible_ssh_user=ansibleadmin


#**************************************************************************************************************************
#hosts file is the default Inventory file for ansible 
#**************************************************************************************************************************
#Access thru Ansible Controller :
#**************************************************************************************************************************

ansible <hosts_name> -m <module_name> -i <inventory_file>

ansible testnodes -m ping

ansible dev_server_grp1 -m ping -i dev_servers

#host machines can be identified using :
#all | group_name | individual_host_name


###update vi /etc/ansible/host

[testnodes]
samplenode1 ansible_ssh_host=172.31.41.32 ansible_ssh_user=ansibleadmin
samplenode2 ansible_ssh_host=172.31.39.17 ansible_ssh_user=ansibleadmin


/etc/ansible/dev_inventory

[devnodes]
sampledevnode1 ansible_ssh_host=172.31.41.32 ansible_ssh_user=ansibleadmin
sampledevnode2 ansible_ssh_host=172.31.39.17 ansible_ssh_user=ansibleadmin

ansible devnodes -m ping -i /etc/ansible/dev_inventory


##################################################################################

#**************************************************************************************************************************
#Access thru Ansible Controller :
#**************************************************************************************************************************
Ansible Modules: Eg.: 
ansible testnodes -m ping

ansible all -m ping ### will ping all hosts from /etc/ansible/hosts file

ansible samplenode1 -m ping
ansible samplenode2 -m ping

#or using user defined Inventory file
#ansible ansible-node1 -m ping -i myinventoryfile.txt


ansible samplenode1 -m ping -i myinventoryfile.txt

#**************************************************************************************************************************

ansible samplenode2 -m ping
ANSIBLE_KEEP_REMOTE_FILES=1 ansible samplenode1 -m shell -a "sleep 5 ; echo 'hi'"

ANSIBLE_KEEP_REMOTE_FILES=1 ansible samplenode1 -m shell -a "uptime"

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Ansible Facts!

ansible samplenode1 -m setup
ansible samplenode1 -m setup -a "filter=ansible_mounts"


##Transfer a file from Ansible Controller to Nodes using copy Module

ansible samplenode1 -m copy -a "src=/etc/ansible/file1.txt dest=/home/ansibleadmin"

ansible samplenode1 -m copy -a "src=/etc/ansible/s1.txt dest=/home/ansibleadmin backup=yes"

##Transfer a file from Ansible Nodes to Ansible Controller using fetch Module
ansible samplenode1 -m fetch -a "src=/home/ansibleadmin/filefrom_AN1.txt dest=/home/devopsadmin"

Ansible Playbooks :::

*.yaml scripts 		==> Key-value pair

- Playbook creation

UseCase 1 :
	- Deploy an artifact *.war from Jenkins Slave Machine to QA-Server.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


### List all modules:
ansible-doc -l
### No. of modules:
ansible-doc -l | wc -l
### Search for specific modules:
ansible-doc -l | grep shel
### To know about any specific modules:
ansible-doc shell


#**************************************************************************************************************************
#Ansible Variables !
#shell : echo $var1 

in yaml : "{{var1}}"



#debugmod.yaml

---
 - hosts: testnodes
   tasks:
   - debug:  
      msg:
       - "The os distribution is: {{ansible_distribution}}" 
       - "THe os name is: {{ansible_system}}"
       - "The os family is: {{ansible_os_family}}"
       - "THe mount points are :{{ansible_mounts}}"

debug module ==

	msg 
	
	var 
	
Handling the variables ::

Playbook should be generic. 
	Hardcode
	use varible 
	dynamically pass the varibles.

---
 - hosts: testnodes
   tasks:
- debug:  
  msg:
   - "The os distribution is: {{ansible_distribution}}" 
   - "THe os name is: {{ansible_system}}"
   - "The os family is: {{ansible_os_family}}"
   - "THe mount points are :{{ansible_mounts}}"
   - copy:  
      msg:
       - "The os distribution is: {{ansible_distribution}}" 
       - "THe os name is: {{ansible_system}}"
       - "The os family is: {{ansible_os_family}}"
       - "THe mount points are :{{ansible_mounts}}"
---
 - hosts: testnodes
   roles:
     mytestrole1
	 
 tasks:
  - debug:
      msg:
       - "The os distribution is: {{ansible_distribution}}"
       - "THe os name is: {{ansible_system}}"
       - "The os family is: {{ansible_os_family}}"
       - "THe mount points are :{{ansible_mounts}}"

 
ansible-playbook testfile.yaml

# How to jus verify playbook syntax:
#ansible-playbook testfile.yaml --syntax-check


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~ test_var-datatype.yaml
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#test_var-datatype.yaml
---
 - hosts: samplenode1
   vars:
    x: 23
    my_num: 45.67
    my_name: Loksai
    my_b: YES   
   tasks:
   - debug:
      msg:
       - "The value of x is: {{x}} and type: {{x|type_debug}}"
       - "THe value of my_num: {{my_num}} and type : {{my_num|type_debug}}"
       - "The value of my_name : {{my_name}} and type: {{my_name|type_debug}}"
       - "THe value of my_b is: {{my_b}} and type : {{my_b|type_debug}}"

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#/etc/ansible/variables/myvarfile1.yaml
    x: 23
    my_num: 45.67
    my_name: Loksai_ETA
    my_b: YES

#test_var-datatype1.yaml
---
 - hosts: samplenode1
   vars_files:
     - /etc/ansible/variables/myvarfile1.yaml
   tasks:
   - debug:
      msg:
       - "The value of x is: {{x}} and type: {{x|type_debug}}"
       - "THe value of my_num: {{my_num}} and type : {{my_num|type_debug}}"
       - "The value of my_name : {{my_name}} and type: {{my_name|type_debug}}"
       - "THe value of my_b is: {{my_b}} and type : {{my_b|type_debug}}"

ansible-playbook test_var-datatype1.yaml


---
 - hosts: samplenode1
   gather_facts: false
   become: yes
   tasks:
   - name: Manage git tool
     yum:
       name: git
       state: present



state ::: present / absent / latest

sudo yum install git -y

sudo yum remove git -y 

sudo yum update git -y

state : present / absent / latest 

yum/apt ::

state : present / absent / latest 
yum install git 
yum remove git 
yum update git 


#manage_pkg.yaml
---
 - hosts: "{{ host_name }}"
   become: yes
   tasks:
   - name: Manage "{{ tool_name }}" service
     yum:
       name: "{{ tool_name }}"
       state: "{{ tool_state }}"


ansible-playbook install3.yaml -e "host_name=samplenode1 tool_name=git tool_state=present"

#manage_pkg.yaml
---
 - hosts: "{{ host_name }}"
   become: yes
   tasks:
   - name: Manage "{{ tool_name1 }}" service
     yum:
       name: "{{ tool_name1 }}"
       state: "{{ tool_state }}"
   - name: Manage "{{ tool_name2 }}" service
     yum:
       name: "{{ tool_name2 }}"
       state: "{{ tool_state }}"
	   
	   
	  Loop :::
	  
ansible-playbook inst3.yaml -e "host_name=samplenode1 tool_name=git tool_state=present"

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~ register and set-facts
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#test_var-datatype.yaml
---
 - hosts: samplenode1
   gather_facts: false
   tasks:
   - shell: "bash --version"



#test_var-datatype.yaml
---
 - hosts: samplenode1
   tasks:
   - shell: "bash --version"
     register: bash_ver
   - debug: var=bash_ver
   















   
#register_set_facts.yaml
---
 - hosts: samplenode1
   tasks:
   - shell: "bash --version"
     register: bash_ver
   - set_fact:
      bash_version: "{{bash_ver.stdout.split('\n')[0].split()[3]}}"
      my_value: "bash version"
   - debug: var=bash_version
   
   
   
   
Handlers :::



---
  - hosts: samplenode1
    #gather_facts: false
    become: yes
    tasks:
      - name: Install httpd
        yum:
          name: httpd
          state: present
        notify:
        - start httpd
    handlers:
    - name: start httpd
      service:
          name: httpd
          state: started



Service Module :: started / stopped / restart 
		  
		  
		  
Handlers --> are used to controll the flow of playbook execution, based on the previous modules
		This can be done thru notify key.

		Handlers are same as tasks.


Loops :

---
  - hosts: samplenode1
    become: yes
    tasks:
      - yum:
         name: git
         state: present
      - yum:
         name: httpd
         state: present
      - yum:
         name: vim
         state: present



Loops :::

---
  - hosts: samplenode1
    gather_facts: false
    become: yes
    tasks:
      - yum:
         name: "{{item}}"
         state: absent
        loop:
          - git
          - httpd
          - vim
 
#~~~~~~~~~~~~~~~~~~~~~~~~~
Ansible Roles :::


		Ansible Roles are used to organize the Ansible Components
		To reuse & Share.

		Ansible Repository ::

		Understand the structure of Ansible Components ::::

			playbooks, handlers, loop, variable, defaults, tasks,
			
			

